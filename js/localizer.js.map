{"version":3,"sources":["../../../app/js/localizer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAeA,SAAS,SAAT,GAAqB;;;;;AAKnB,MAAI,SAAS;AACX,wBAAoB,WAApB;AACA,qBAAiB,OAAjB;AACA,uBAAmB,wBAAnB;AACA,uBAAmB,mCAAnB;AACA,wBAAoB,IAApB;AACA,4BAAwB,QAAxB;AACA,iBAAa,MAAb;AACA,mBAAe,QAAf;AACA,6BAAyB,sBAAzB;GATE;;;;;;;;;;;;;AALe,MA4BnB,CAAK,cAAL,GAAsB,UAAS,GAAT,EAAc;AAClC,QAAI,OAAO,EAAP,CAD8B;AAElC,QAAI,OAAO,MAAP,IAAiB,OAAO,MAAP,CAAc,IAAd,EAAoB;AACvC,aAAO,OAAO,IAAP,CAAY,UAAZ,CAAuB,GAAvB,CAAP,CADuC;KAAzC,MAEO;AACL,aAAO,OAAO,GAAP,CAAP,CADK;KAFP;AAKA,WAAO,IAAP,CAPkC;GAAd,CA5BH;;AAsCnB,OAAK,oBAAL,GAA4B,YAAW;;;AACrC,QAAI,OAAO;AACT,sBAAgB,oBAAhB;AACA,mBAAa,iBAAb;AACA,qBAAe,mBAAf;AACA,yBAAmB,mBAAnB;AACA,sBAAgB,oBAAhB;AACA,0BAAoB,wBAApB;AACA,eAAS,aAAT;AACA,iBAAW,eAAX;KARE,CADiC;AAWrC,QAAI,MAAM,OAAO,IAAP,CAAY,IAAZ,CAAN,CAXiC;;AAarC,QAAI,OAAJ,CACE,cAAM;AACJ,eAAS,aAAT,OAA2B,EAA3B,EAAiC,WAAjC,GACE,MAAK,cAAL,CAAoB,KAAK,EAAL,CAApB,CADF,CADI;KAAN,CADF,CAbqC;GAAX,CAtCT;;AA2DnB,SAAO,IAAP,CA3DmB;CAArB","file":"localizer.js","sourcesContent":["/*\n * Copyright (c) 2012, Intel Corporation.\n *\n * This program is licensed under the terms and conditions of the\n * Apache License, version 2.0.  The full text of the Apache License is at\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n */\n\n/* exported Localizer */\n\n/**\n * class to encapsulate methods to do with localisation.\n * @return {object} instance of Localizer.\n */\nfunction Localizer() {\n  /**\n   * When adding new locale to the application, DO NOT to forget to add its english translation\n   * to this array, as this array is being used to provide default translation text\n   */\n  var LOCALE = {\n    memoryClearallText: 'Clear All',\n    memoryCloseText: 'Close',\n    dialogHeadingText: 'Clear All Memory slots',\n    dialogContentText: 'All memory slots will be cleared.',\n    dialogOKButtonText: 'OK',\n    dialogCancelButtonText: 'Cancel',\n    mneSaveText: 'Save',\n    mneCancelText: 'Cancel',\n    malformedExpressionText: 'Malformed Expression'\n  };\n\n  /**\n   * Returns translated strings\n   *\n   * @param {string} key The key of the message.\n   * @return {string} The translation.\n   *\n   * if the application is installed the translation string is fetched from the\n   * application translation file. If not (just opening index.html), it is assumed that\n   * English is the default language and the associated translated strings are\n   * returned from the array named LOCALE.\n   */\n  this.getTranslation = function(key) {\n    var text = '';\n    if (window.chrome && window.chrome.i18n) {\n      text = chrome.i18n.getMessage(key);\n    } else {\n      return LOCALE[key];\n    }\n    return text;\n  };\n\n  this.localizeHtmlElements = function() {\n    var keys = {\n      memoryclearall: 'memoryClearallText',\n      memoryClose: 'memoryCloseText',\n      dialogheading: 'dialogHeadingText',\n      dialogcontenttext: 'dialogContentText',\n      dialogokbutton: 'dialogOKButtonText',\n      dialogcancelbutton: 'dialogCancelButtonText',\n      mnesave: 'mneSaveText',\n      mnecancel: 'mneCancelText'\n    };\n    var ids = Object.keys(keys);\n\n    ids.forEach(\n      id => {\n        document.querySelector(`#${id}`).textContent =\n          this.getTranslation(keys[id]);\n      }\n    );\n  };\n\n  return this;\n}\n\n"]}